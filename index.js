// --- 1. Import ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
const admin = require("firebase-admin");
const mqtt = require("mqtt"); // (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
const express = require("express");
const cors = require("cors");
const axios = require("axios");

// --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ---
const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
if (admin.apps.length === 0) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const db = admin.firestore();
console.log("‚úÖ Firebase Firestore connected successfully!");


// --- 3. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NETPIE API ---
// (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡∏£‡∏´‡∏≤ API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
const NETPIE_API_KEY = "42e16b39-faf6-4e0f-9899-456a61d8e10f"; // <-- Key ‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å cURL
const NETPIE_API_SECRET = "AjKk5jJhALhENmhSs2ETSWaSC3R6hUuB";   // <-- Secret ‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å cURL


// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Express App ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î CORS ---
const app = express();
app.use(cors());
app.use(express.json());


// --- 5. API Endpoints (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ) ---

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Live Data) ‡∏à‡∏≤‡∏Å NETPIE API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
app.get("/get-latest-data/:alias", async (req, res) => {
  try {
    const { alias } = req.params;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏à‡∏≤‡∏Å Key/Secret ‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
    const token = Buffer.from(`${NETPIE_API_KEY}:${NETPIE_API_SECRET}`).toString('base64');
    
    // **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° cURL (‡πÑ‡∏°‡πà‡∏°‡∏µ /data ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)
    const netpieApiUrl = `https://api.netpie.io/v2/device/shadow/data?alias=${alias}`;
    
    console.log(`Forwarding request to NETPIE for alias: ${alias}`);
    const response = await axios.get(netpieApiUrl, {
      headers: { 'Authorization': `Basic ${token}` }
    });
    
    console.log(`Successfully fetched data from NETPIE for alias: ${alias}`);
    res.status(200).json(response.data);
  } catch (error) {
    console.error("!!! NETPIE API FORWARDING ERROR !!! in /get-latest-data:", error.response?.data || error.message);
    res.status(error.response?.status || 500).send(error.response?.data || { message: "Internal server error." });
  }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Firestore
app.get("/get-historical-data/:alias", async (req, res) => {
    try {
        const { alias } = req.params;
        const { startDate, endDate } = req.query;
        if (!startDate || !endDate) {
          return res.status(400).send({ error: "startDate and endDate query parameters are required." });
        }
        const start = new Date(startDate);
        const end = new Date(endDate);
        const snapshot = await db.collection("device_data").where('alias', '==', alias).where('timestamp', '>=', start).where('timestamp', '<=', end).orderBy("timestamp", "asc").get();
        if (snapshot.empty) {
          return res.status(200).json([]);
        }
        const data = snapshot.docs.map((doc) => {
            const docData = doc.data();
            if (docData.timestamp && typeof docData.timestamp.toDate === 'function') {
                docData.timestamp = docData.timestamp.toDate().toISOString();
            }
            return docData;
        });
        res.status(200).json(data);
    } catch (error) {
        console.error("!!! INTERNAL SERVER ERROR !!! in /get-historical-data:", error);
        res.status(500).send({ error: "Failed to get historical data." });
    }
});


// --- 6. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
});‡∏´