// --- 1. Import ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const admin = require("firebase-admin");


// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Service Account ‡∏à‡∏≤‡∏Å Environment Variable
const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);

// Credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NETPIE (‡πÉ‡∏ä‡πâ Client ID ‡πÅ‡∏•‡∏∞ Token)
const DEVICE_CLIENT_ID = "9585c7e4-97d7-4c50-b2f1-ea5fc1125e8a"; 
const DEVICE_TOKEN = "jiXFhjE4fgcmFtuYV16nv5Mbhpu9gLTv"; 
const NETPIE_AUTH_HEADER = `Device ${DEVICE_CLIENT_ID}:${DEVICE_TOKEN}`;

// --- 3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase ---
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://bsem-5e4c1-default-rtdb.asia-southeast1.firebasedatabase.app" // URL ‡∏Ç‡∏≠‡∏á Realtime Database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const db = admin.database();
const deviceDataRef = db.ref(`devices/${DEVICE_CLIENT_ID}/latest_data`);

console.log("‚ñ∂Ô∏è Starting Firebase Bridge Server...");

// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Server ---
const app = express();
app.use(cors());


// --- [Endpoint ‡πÉ‡∏´‡∏°‡πà!] ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å NETPIE ---
// --- [Endpoint ‡πÉ‡∏´‡∏°‡πà!] ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å NETPIE ---
// --- [Endpoint ‡πÉ‡∏´‡∏°‡πà!] ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å NETPIE (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥) ---
app.post("/netpie-webhook", express.text({ type: '*/*' }), async (req, res) => {
  try {
    const shadowData = JSON.parse(req.body);
    console.log('[Webhook] Received and parsed shadow data:', shadowData);

    if (shadowData) {
      // --- [‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1] ‡∏™‡∏£‡πâ‡∏≤‡∏á reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
      const deviceId = process.env.DEVICE_CLIENT_ID;
      const latestDataRef = db.ref(`devices/${deviceId}/latest_data`);
      const historyRef = db.ref(`devices/${deviceId}/history`); // <--- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥

      // --- [‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2] ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡∏Ç‡∏≠‡∏á Server ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
      const dataWithTimestamp = {
        ...shadowData,
        timestamp: admin.database.ServerValue.TIMESTAMP // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      };

      // --- [‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3] ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Firebase ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 2 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ---
      await Promise.all([
        latestDataRef.set(shadowData),             // 1. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        historyRef.push(dataWithTimestamp)         // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô history (‡∏ó‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°)
      ]);

      console.log('[Firebase] Updated latest data and pushed to history.');
      res.status(200).send("OK");

    } else {
      console.log('[Webhook] Received empty data.');
      res.status(400).send("Received empty data.");
    }
  } catch (error) {
    console.error(`!!! [Webhook Error]`, error.message);
    res.status(500).send("Internal Server Error");
  }
});


// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
app.get("/", (req, res) => {
  res.status(200).send("Firebase Bridge Server is running.");
});

// --- 5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ API Server is ready on port ${PORT}`);
});