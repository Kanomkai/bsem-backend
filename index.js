// --- 1. Import ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
const express = require("express");
const cors = require("cors");
const admin = require("firebase-admin");

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ Service Account ‡∏à‡∏≤‡∏Å Environment Variable
const serviceAccount = JSON.parse(process.env.FIREBASE_CREDENTIALS);

// --- 3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase ---
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://bsem-5e4c1-default-rtdb.asia-southeast1.firebasedatabase.app"
});

const db = admin.database();
console.log("‚ñ∂Ô∏è Starting Firebase Bridge Server...");

// --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Server ---
const app = express(); // <--- üö® THIS LINE WAS MISSING!
app.use(cors());

// --- [‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà app.post ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î] ---
app.post("/netpie-webhook", express.text({ type: '*/*' }), async (req, res) => {
  console.log("========================================");
  console.log(`[DEBUG] Webhook received at: ${new Date().toISOString()}`);

  // --- [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô ---
  console.log("[DEBUG] Type of req.body:", typeof req.body);
  console.log("[DEBUG] RAW BODY:", req.body);

  try {
    let shadowData;

    // --- ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ body ‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ---
    if (typeof req.body === 'string') {
      console.log("[DEBUG] Body is a string. Attempting JSON.parse()...");
      shadowData = JSON.parse(req.body);
    } else if (typeof req.body === 'object' && req.body !== null) {
      console.log("[DEBUG] Body is already an object. Using it directly.");
      shadowData = req.body;
    } else {
      throw new Error("Received body is not a string or a valid object.");
    }

    console.log("[DEBUG] Parsed data is:", shadowData);

    if (shadowData && Object.keys(shadowData).length > 0) {
      // --- ‡πÉ‡∏ä‡πâ Device ID ‡∏ó‡∏µ‡πà Hardcode ‡πÑ‡∏ß‡πâ ---
      const deviceId = "9585c7e4-97d7-4c50-b2f1-ea5fc1125e8a";
      const latestDataRef = db.ref(`devices/${deviceId}/latest_data`);
      const historyRef = db.ref(`devices/${deviceId}/history`);

      const dataWithTimestamp = {
        ...shadowData,
        timestamp: admin.database.ServerValue.TIMESTAMP
      };

      console.log("[DEBUG] Preparing to save to Firebase...");

      await Promise.all([
        latestDataRef.set(shadowData),
        historyRef.push(dataWithTimestamp)
      ]);

      console.log("[Firebase] ‚úÖ SUCCESS! Data saved."); // <-- Log ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô
      res.status(200).send("OK");

    } else {
      console.log('[Result] ‚ö†Ô∏è The parsed data is empty. Nothing to save.');
      res.status(400).send("Received empty data.");
    }
  } catch (error) {
    // --- [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà message ---
    console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    console.error("!!! [CRITICAL ERROR] An error occurred in the try block:");
    console.error(error); // <-- ‡πÅ‡∏™‡∏î‡∏á Error ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÜ
    console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    res.status(500).send("Internal Server Error");
  }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
app.get("/", (req, res) => {
  res.status(200).send("Firebase Bridge Server is running.");
});

// --- 5. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ API Server is ready on port ${PORT}`);
});