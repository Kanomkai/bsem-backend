// --- 1. Import ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
const express = require("express");
const cors = require("cors");
const axios = require("axios");

console.log("‚ñ∂Ô∏è Starting the API Server (NETPIE2020 Fixed Device ID)...");

// --- 2. [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Credentials ‡πÅ‡∏•‡∏∞ Device ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ---
// üîë ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Key ‡πÅ‡∏•‡∏∞ Secret ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å NETPIE2020 Dashboard ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const NETPIE_API_KEY = "9585c7e4-97d7-4c50-b2f1-ea5fc1125e8a"; // <--- üîë ‡πÉ‡∏™‡πà Client ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const NETPIE_API_SECRET = "cJWyfo4EKij9AHzjtu3gJFYUKTiq1feA"; // <--- ü§´ ‡πÉ‡∏™‡πà Secret ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

// üéØ ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
const TARGET_DEVICE_ID = "9585c7e4-97d7-4c50-b2f1-ea5fc1125e8a"; 

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Authorization Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
const NETPIE_AUTH_TOKEN = Buffer.from(`${NETPIE_API_KEY}:${NETPIE_API_SECRET}`).toString('base64');

// --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Server ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ ---
const app = express();
app.use(cors());
app.use(express.json());


// --- [‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï] Endpoint 1: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Shadow) ---
app.get("/devices/latest", async (req, res) => {
  console.log(`[API] Request for latest shadow data of [${TARGET_DEVICE_ID}]`);
  try {
    // ‚úÖ‚úÖ‚úÖ URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NETPIE2020 Shadow API ‚úÖ‚úÖ‚úÖ
    const netpieApiUrl = `https://api.netpie.io/v2/device/shadow`;
    const response = await axios.get(netpieApiUrl, {
        headers: { 'Authorization': `Basic ${NETPIE_AUTH_TOKEN}` },
        params: {
            // ‡∏™‡πà‡∏á Device ID ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ‡πÉ‡∏´‡∏°‡πà
            ids: [TARGET_DEVICE_ID] 
        }
    });

    // NETPIE2020 ‡∏à‡∏∞ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array, ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    const deviceData = response.data && response.data.length > 0 ? response.data[0] : null;

    if (deviceData) {
        res.status(200).json(deviceData); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } else {
        res.status(404).json({ message: "Device shadow not found." });
    }

  } catch (error) {
    console.error(`!!! [API] NETPIE Shadow ERROR:`, error.response?.data || error.message);
    res.status(error.response?.status || 500).send(error.response?.data || { message: "Internal server error." });
  }
});


// --- [‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï] Endpoint 2: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Data Store) ---
app.get("/devices/historical", async (req, res) => {
  const { start, end } = req.query;

  if (!start || !end) {
    return res.status(400).json({ message: "start and end query parameters are required." });
  }

  console.log(`[API] Request for historical data of [${TARGET_DEVICE_ID}]`);

  try {
    // ‚úÖ‚úÖ‚úÖ URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NETPIE2020 Data Store API ‚úÖ‚úÖ‚úÖ
    const netpieStoreApiUrl = `https://api.netpie.io/v2/feed/datastore/query`;
    const response = await axios.get(netpieStoreApiUrl, {
        headers: { 'Authorization': `Basic ${NETPIE_AUTH_TOKEN}` },
        params: {
            // ‡∏™‡πà‡∏á Device ID ‡πÉ‡∏ô Topic ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á NETPIE2020
            topic: `@private/+/+/${TARGET_DEVICE_ID}/shadow/data/updated`, 
            from: new Date(start).getTime(),
            to: new Date(end).getTime(),
            limit: 1000
        }
    });

    // NETPIE2020 ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°
    const rawData = response.data.data;
    const formattedData = rawData.map(record => {
        try {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô record[1] ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON string
            const parsedData = JSON.parse(record[1]);
            return {
                // ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô record[0] ‡πÄ‡∏õ‡πá‡∏ô millisecond
                timestamp: new Date(record[0]).toISOString(),
                // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Pa ‡∏à‡∏≤‡∏Å data.Pa
                Pa: parsedData.data?.Pa || 0
            };
        } catch(e) { return null; }
    }).filter(item => item !== null);

    res.status(200).json(formattedData.sort((a, b) => a.timestamp.localeCompare(b.timestamp)));

  } catch (error) {
    console.error(`!!! [API] NETPIE Data Store ERROR:`, error.response?.data || error.message);
    res.status(error.response?.status || 500).send(error.response?.data || { message: "Internal server error." });
  }
});


// --- [‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï] Endpoint 3: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Report (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Data Store) ---
app.get("/devices/reports", async (req, res) => {
    const { period } = req.query;
    if (!period) {
        return res.status(400).json({ message: "period query parameter is required." });
    }

    console.log(`[API] Request for report data of [${TARGET_DEVICE_ID}] for period [${period}]`);

    try {
        const now = new Date();
        let startDate;
        const endDate = new Date(now);

        if (period === 'last7days') {
            startDate = new Date(now);
            startDate.setDate(now.getDate() - 6);
            startDate.setHours(0, 0, 0, 0);
        } else if (period === 'thisMonth') {
            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        } else if (period === 'lastMonth') {
            startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
            endDate.setDate(0);
        } else {
            return res.status(400).json({ message: 'Invalid period.' });
        }

        // ‚úÖ‚úÖ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NETPIE2020 Data Store API ‚úÖ‚úÖ‚úÖ
        const netpieStoreApiUrl = `https://api.netpie.io/v2/feed/datastore/query`;
        const response = await axios.get(netpieStoreApiUrl, {
            headers: { 'Authorization': `Basic ${NETPIE_AUTH_TOKEN}` },
            params: {
                topic: `@private/+/+/${TARGET_DEVICE_ID}/shadow/data/updated`,
                from: startDate.getTime(),
                to: endDate.getTime(),
                limit: 50000
            }
        });

        const rawData = response.data.data;
        if (!rawData || rawData.length === 0) {
            return res.status(200).json([]);
        }

        const dailySummary = {};
        rawData.forEach(record => {
            try {
                const recordTimestamp = record[0];
                const recordData = JSON.parse(record[1]).data;
                const recordDate = new Date(recordTimestamp);
                const dayKey = `${recordDate.getFullYear()}-${String(recordDate.getMonth() + 1).padStart(2, '0')}-${String(recordDate.getDate()).padStart(2, '0')}`;
                
                if (!dailySummary[dayKey]) {
                    dailySummary[dayKey] = { min_pkWh: Infinity, max_pkWh: -Infinity };
                }
                if (recordData && typeof recordData.pkWh === 'number') {
                    if (recordData.pkWh < dailySummary[dayKey].min_pkWh) dailySummary[dayKey].min_pkWh = recordData.pkWh;
                    if (recordData.pkWh > dailySummary[dayKey].max_pkWh) dailySummary[dayKey].max_pkWh = recordData.pkWh;
                }
            } catch(e) {}
        });

        const reportData = Object.keys(dailySummary).map(dayKey => {
            const summary = dailySummary[dayKey];
            const kwhUsed = (summary.max_pkWh === -Infinity || summary.min_pkWh === Infinity) ? 0 : (summary.max_pkWh - summary.min_pkWh);
            const co2 = kwhUsed * 0.5;
            const cost = kwhUsed * 4.0;
            return {
                date: dayKey,
                kwh: kwhUsed.toFixed(2).toString(),
                co2: co2.toFixed(2).toString(),
                cost: cost.toFixed(2).toString()
            };
        });
        
        res.status(200).json(reportData.sort((a, b) => b.date.localeCompare(a.date)));

    } catch (error) {
        console.error(`!!! [API] NETPIE Data Store ERROR:`, error.response?.data || error.message);
        res.status(error.response?.status || 500).send(error.response?.data || { message: "Internal server error." });
    }
});


// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
app.get("/", (req, res) => {
  res.status(200).send("API Server (NETPIE2020 Fixed Device ID) is running.");
});

// --- 4. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ API Server is ready on port ${PORT}`);
});